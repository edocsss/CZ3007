package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short INT = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short RBRACKET = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLbTu5KKK$dTl4amCX2Y9O450I07J28aGY2G4Ga92m4WGKOE2zDv25rGiM13bWLTV11K" +
		"L2oXYmu8LiM15B82eO2DWG4Gz$Zixzxftxrrkhf$okVlzSygSEJEpStRE0SpL68P2344$r6" +
		"4uhi1GzC9Kz401piTqp4KNfA8jsk5id8DpSHxQeqtK8ywAUiG54KTak4P4ii#AqdwnotuMh" +
		"iHebE0oZC3b60bJtiKIN8Ubw2I$eZ$c8nFPo0snkpF8xgBcsA6FtETfDmv50N#DcE5fvyFO" +
		"WByOhFAqQo7t1#okbZy2Tg7VfqPz7o$zm62$yZCQK8LAEOJPo4TVb3b6LM5m63#ZFFnxwRi" +
		"f$LNiAGlgwIt7aOHhmep8y$3KqqC$m4C$naE$CDoN2977HRHefM8mbYUu4fUW5fVY39o9yP" +
		"Y0YPY4oPZYsdDnH8#dMYuDMbzBfCXxREFG0QSX7dUnNOcEIC3fIDJjShNdcmFKtdThfEleJ" +
		"DFqUYnZxosaDyh3yWsIqLc#nQrshugs2bJZ1dJ5XSX1T$J1nVmxowaT90#HhyS2MOThSHEc" +
		"OH5codUo7oim1$DmE#w6zToXsdjKUnliPnNdJ#UTaqc$tUWvY$z83l#IFCwGhqwzaFzsJyP" +
		"04NfppcBEz7ySyL$R6p1vyyGmTkFGWgVSNfzkIyPq0lkILIIt2R5h6sINsYox4iQ8brqCey" +
		"zlPvnaNeDtlD#k5VEKbrq28z5lby9uyDjvVHylVUZy9YEpKj4aroXB7wr$B$sWC3q9d3MS$" +
		"f$Dy6zyYU0JZ6HXns0$dc1$dQVZUJeTUAzqOltGcJdSFNSaZwTQ3bvVNvv8WigK1ZDF6NSs" +
		"W3jBOhQiPhwqMtlFHe3Q#$QnQh6ZSwYcvRoH3OwrQ3pV6dgEPnrZzzhhIE7hepQ9RmblR9C" +
		"nxbFMfOfhJSxo4QyuYs$DDnQ6y46IeqqLzV3$0LOlis$C9SH1OX$n6R66Q0ACEDBrfACiEp" +
		"y0Sm1r4qchY17ato2ssVUmcQ5zhYMVwHpd1liBY2njluNySAtFrReTMfv0$#j8nr3OgtNrD" +
		"ZKwaGzQdnvxB$isQ9kDn6OoEqct4fk8FRhlW6CzqoataexMyWpAnqadQtaOOH1J76FoJhR7" +
		"C7kE9yRhDHuYdqnOtx8TCREPFgRgyRl9JzEwiSGilQUkv6Th$LoY8p67mj4mlXg8EgAIc4S" +
		"ir3woTJ#9EPzOIYnmZ5kawN9YyTzwE6mCPcJZi4Dk2ftVMEFmcUpd6Q2x7FoHvdmNnneI7J" +
		"vzMjV5CQS$vefTQodtzcdKwZ4ho1VHRuuTLuecwhbYN6FgNUlQxv8RWsMp8Bfz6YakkQEca" +
		"wBn4#MS3NhjTTusPefNduVFOw4wh8P#v8JygIXREIP7fGckHtvHxJxPAtlaA$bIlf3FbUOJ" +
		"rRulkuMtcdmQiF#O#4Xn7ye7yexia2V9losyn#HruaNYEMApF6Nra7jJjik3f8yG5bqlRyb" +
		"MUKQsoDFoh6oIZVA4F2wFoQEoGTa$u5ZTMdb1dfVNv5NP9g$8o$8ITJjLpq7PplPxnHy8sE" +
		"#Id#H7#S7XuMlYI40wp3$YXFok#D$OZ6GUCWYmnefZ9Z89C1lvc9TC0inDHW1Lp0xLp6k3Q" +
		"TjTPISR#Gxqu5W$QYZNq8ULemPIBgVFGl9UwALWijwCPOOpMNFwM776ikOqMNNw29ErfybA" +
		"rCUQs2J0AiDGoAKkdTH21jTeLHvvr0qX3OTizcMJbcXaKROgXr87qZX76cbc17JbV5PjLqa" +
		"V5QGLN5StyeDKvULZplUXzY#B6doE");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Import ModuleDeclaration RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Import = ImportTerminal Import; returns 'Import' although none is marked
			Action.NONE,  	// [4] Import = 
			RETURN3,	// [5] ImportTerminal = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] ModuleDeclaration = ModuleDeclarationTerminal ModuleDeclaration; returns 'ModuleDeclaration' although none is marked
			Action.NONE,  	// [7] ModuleDeclaration = 
			Action.RETURN,	// [8] ModuleDeclarationTerminal = FunctionDeclaration
			Action.RETURN,	// [9] ModuleDeclarationTerminal = FieldDeclaration
			Action.RETURN,	// [10] ModuleDeclarationTerminal = TypeDeclaration
			RETURN9,	// [11] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ID
			Action.RETURN,	// [16] TypeName = ArrayType
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = ParameterListHelper
			Action.NONE,  	// [24] ParameterList = 
			Action.RETURN,	// [25] ParameterListHelper = Parameter
			RETURN3,	// [26] ParameterListHelper = Parameter COMMA ParameterListHelper; returns 'ParameterListHelper' although none is marked
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [28] Statement = LocalVariableDeclaration
			Action.RETURN,	// [29] Statement = BlockStatement
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			Action.RETURN,	// [34] Statement = ExpressionStatement
			Action.RETURN,	// [35] IfStatement = IfOnlyStatement
			RETURN2,	// [36] IfStatement = IfOnlyStatement ElseOnlyStatement; returns 'ElseOnlyStatement' although none is marked
			RETURN5,	// [37] IfOnlyStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [38] ElseOnlyStatement = ELSE Statement; returns 'Statement' although none is marked
			RETURN3,	// [39] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN5,	// [40] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [41] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [46] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [47] StatementList = 
			Action.RETURN,	// [48] Expression = Assignment
			Action.RETURN,	// [49] Expression = RHSExpression
			RETURN3,	// [50] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [51] LHSExpression = ID
			Action.RETURN,	// [52] LHSExpression = ArrayAccess
			RETURN4,	// [53] ArrayAccess = LHSExpression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [54] RHSExpression = ArithmeticExpression
			RETURN3,	// [55] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [56] ComparisonOperator = EQEQ
			Action.RETURN,	// [57] ComparisonOperator = NEQ
			Action.RETURN,	// [58] ComparisonOperator = LT
			Action.RETURN,	// [59] ComparisonOperator = LEQ
			Action.RETURN,	// [60] ComparisonOperator = GT
			Action.RETURN,	// [61] ComparisonOperator = GEQ
			new Action() {	// [62] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [63] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [64] AdditiveOperator = PLUS
			Action.RETURN,	// [65] AdditiveOperator = MINUS
			new Action() {	// [66] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [67] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [68] MultiplicativeOperator = TIMES
			Action.RETURN,	// [69] MultiplicativeOperator = DIV
			Action.RETURN,	// [70] MultiplicativeOperator = MOD
			RETURN2,	// [71] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [72] Factor = PrimaryExpression
			Action.RETURN,	// [73] PrimaryExpression = LHSExpression
			Action.RETURN,	// [74] PrimaryExpression = FunctionCall
			Action.RETURN,	// [75] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [76] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [77] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [78] PrimaryExpression = TRUE
			Action.RETURN,	// [79] PrimaryExpression = FALSE
			Action.RETURN,	// [80] PrimaryExpression = ParenthesizedExpression
			RETURN4,	// [81] FunctionCall = ID LPAREN ArgumentsList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [82] ArgumentsList = Argument
			RETURN3,	// [83] ArgumentsList = Argument COMMA ArgumentsList; returns 'ArgumentsList' although none is marked
			Action.RETURN,	// [84] Argument = Expression
			Action.NONE,  	// [85] Argument = 
			RETURN3,	// [86] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [87] NonEmptyExpressionList = Expression
			RETURN3,	// [88] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			RETURN3	// [89] ParenthesizedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
