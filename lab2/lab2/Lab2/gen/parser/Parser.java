package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short RBRACKET = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short SEMICOLON = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLWTq55KKlJER04d0B4X2KH0Y418CtKWnGYY9T4DH4II0ZQQ82XP04H0q8ceeScpeeJV" +
		"5WWKBYWtKW8YYWgY087O1HHJrUUVlts5sTiPaEGUEi#V#L#Q#z$$##UK1vdfSX6pqGWTqGc" +
		"TqHH#qnXYqnDau0zVZPjH7AggZ1chYD9oEMgYDgZ57L8ivuinI8ngw8ahZPyN8d#JYZyF56" +
		"8Jso4C#paSNnCi7c8NRCHbJa8OW9Y03ZT4qYZU3FDFcdUl7amNajR5v0TzyTwhnXNbnlhmx" +
		"C1rpR5vvNzufpdpojysBdfzXQdxy$DrSURjZ2Ax0vUYBVhWGBRGSAWTm0$rNUUGPu9FVpzz" +
		"8#VlpJSU8DstbPzo2IpqYclbaQkNZx#7ZB$3n5yQOvrQlcPCLKNCv0icuAShhZli5TsCusn" +
		"ivyxFb3wxEaHY5gt4DHkFQqg9TivXJAlzas#qYnfSROLL25PpAjXndgW8Ia88AiWL5I4GIA" +
		"kesj6#AGYjT5cCuwg8ExNGvebV$G3aYtt3VJDMSvR8FnQYCUcY0UwXbuYoSWoQu4jFGd3lv" +
		"FFJ41UXDUOaimc1SXkjafIp3HDo5iHYFssG$PifUt8Uv$7hXvrxYVgKzOFlci8TqdcWPxAC" +
		"HUydY3cp2FTYC$RHGQoIRFRVYYcc3jkmvXtt#7oDEDD$WIHhWcHVFBrsUNxe3lsqdVjjAFC" +
		"MI#QQoMWTLetX1ychRlFQ#lDxazR9vXYylDBumBzcNPwtTQZOliOpvOFFyviVFxyvhMTRU2" +
		"TrYGIqB5C$onvhVpz$LuutLXvV$#7euqNxtp2L4UUBeIOhoUjarj3UqEklmd4bZFLEFDKLf" +
		"qUxHbQMtasb7ZY$IQiSvIrQdT1pFv8xyxvq9W#TuTzv$eJQqpWszqfCuKq5Q1ckkHErBePQ" +
		"Wzat8Jk2lEi$PH9wqjQW5QASoAeM$87ToBhEOX2MJ53kese3wMY6FGSHRjkW7gKHGQK7RLu" +
		"txRjwaq7ayYzX8R2Qs0UOuols0KOxwUCfT5YyC#iRIjuNAVEeJYVv4Nzh5b8KwvsBgGvnnR" +
		"l3z16AKvg#bFatx1slV9ctp$Z2sKiwWiLlxfeUaaKQzo2CtXR53Sqg8W$GDfVoJIA6Ug7bL" +
		"$ckCaJcD3F9h4iKwzc72wd#sVb$3OnoPn5ojZoQQ4xm9pJR4Wpfk7VM7DESHOWhHWNYqREC" +
		"ov#WysTJdQtqViK7hm#X$J7CN4Ls91JGEU#HQI4mbHXBMDrogS#oXlaHpLX6F4ok8POxOvL" +
		"gk9bOUysECGxVMIfeZfdxq653YU9yRrhbejplqGsMP6qVEYkwSVEeVynbPsfSJ6MVa#USqU" +
		"kiOxXV3#fu3A7U6fAdpcIrZ6wSno6MFS8oxq8EVuhBhQZdEyT$tHiVXG2pZyXdhP1$$JDr7" +
		"F$zOB3gE$fPwv9a7$SXH#KT9jlAx79RVu7haLzNkaTsoIxwIB#KBsQaydwhsG$bSTb1#PlC" +
		"$8ROfxMFvI3RB9bb3lKGsi7s7U8rucNXUdfCrygmy8q$BKx9QdfGdv7qLzwwyf#H6MIThvK" +
		"LvGLvIzXB7g1QgTfLjBvLNvHLvMzwID#KDMI#lqxTLlVdEoYhVA$rRcxzTVf8VvGT7ngzLU" +
		"yYs3tA$79M$bCxp3mDvRna4M06Muxrj4k3T7U0zPXBWNMROwCRxf3jlkHxaDgSTHWi7MZ8s" +
		"Z9wqUp97FcK#xJpcpARkXzOA9klVUDvw9clW02lWUDR09glW066o5ZPP6GTOevi4MCKO2at" +
		"fIwUqq91Zj61LDytexqNfXSPyPzLhxJMoQ5krHwu33TXF0ygCKf39$gpwie1ZwaBPHLMW1Y" +
		"k40Aj1WmYmLWYWpxzaqPTy");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] Accessibility = PUBLIC
			Action.NONE,  	// [1] Accessibility = 
			RETURN6,	// [2] Module = MODULE ID LCURLY Import ModuleDeclaration RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Import = ImportTerminal Import; returns 'Import' although none is marked
			Action.NONE,  	// [4] Import = 
			RETURN3,	// [5] ImportTerminal = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] ModuleDeclaration = ModuleDeclarationTerminal ModuleDeclaration; returns 'ModuleDeclaration' although none is marked
			Action.NONE,  	// [7] ModuleDeclaration = 
			Action.RETURN,	// [8] ModuleDeclarationTerminal = FunctionDeclaration
			Action.RETURN,	// [9] ModuleDeclarationTerminal = FieldDeclaration
			Action.RETURN,	// [10] ModuleDeclarationTerminal = TypeDeclaration
			RETURN9,	// [11] FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] FieldDeclaration = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ID
			Action.RETURN,	// [16] TypeName = ArrayType
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = ParameterListHelper
			Action.NONE,  	// [24] ParameterList = 
			Action.RETURN,	// [25] ParameterListHelper = Parameter
			RETURN3,	// [26] ParameterListHelper = Parameter COMMA ParameterListHelper; returns 'ParameterListHelper' although none is marked
			RETURN2,	// [27] Parameter = TypeName ID; returns 'ID' although none is marked
			Action.RETURN,	// [28] Statement = LocalVariableDeclaration
			Action.RETURN,	// [29] Statement = BlockStatement
			Action.RETURN,	// [30] Statement = IfStatement
			Action.RETURN,	// [31] Statement = WhileStatement
			Action.RETURN,	// [32] Statement = BreakStatement
			Action.RETURN,	// [33] Statement = ReturnStatement
			Action.RETURN,	// [34] Statement = ExpressionStatement
			Action.RETURN,	// [35] IfStatement = IfOnlyStatement
			RETURN2,	// [36] IfStatement = IfOnlyStatement ElseOnlyStatement; returns 'ElseOnlyStatement' although none is marked
			RETURN5,	// [37] IfOnlyStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [38] ElseOnlyStatement = ELSE Statement; returns 'Statement' although none is marked
			RETURN3,	// [39] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN5,	// [40] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [41] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [42] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [43] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] BlockStatement = LCURLY StatementList RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [46] StatementList = Statement StatementList; returns 'StatementList' although none is marked
			Action.NONE,  	// [47] StatementList = 
			Action.RETURN,	// [48] Expression = Assignment
			Action.RETURN,	// [49] Expression = RHSExpression
			RETURN3,	// [50] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [51] LHSExpression = ID
			Action.RETURN,	// [52] LHSExpression = ArrayAccess
			RETURN4,	// [53] ArrayAccess = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [54] ArrayAccess = ArrayAccess LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [55] RHSExpression = ArithmeticExpression
			RETURN3,	// [56] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [57] ComparisonOperator = EQEQ
			Action.RETURN,	// [58] ComparisonOperator = NEQ
			Action.RETURN,	// [59] ComparisonOperator = LT
			Action.RETURN,	// [60] ComparisonOperator = LEQ
			Action.RETURN,	// [61] ComparisonOperator = GT
			Action.RETURN,	// [62] ComparisonOperator = GEQ
			new Action() {	// [63] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [64] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [65] AdditiveOperator = PLUS
			Action.RETURN,	// [66] AdditiveOperator = MINUS
			new Action() {	// [67] Term = Term MultiplicativeOperator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [68] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [69] MultiplicativeOperator = TIMES
			Action.RETURN,	// [70] MultiplicativeOperator = DIV
			Action.RETURN,	// [71] MultiplicativeOperator = MOD
			RETURN2,	// [72] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [73] Factor = PrimaryExpression
			Action.RETURN,	// [74] PrimaryExpression = LHSExpression
			Action.RETURN,	// [75] PrimaryExpression = FunctionCall
			Action.RETURN,	// [76] PrimaryExpression = ArrayExpression
			Action.RETURN,	// [77] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [78] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [79] PrimaryExpression = TRUE
			Action.RETURN,	// [80] PrimaryExpression = FALSE
			Action.RETURN,	// [81] PrimaryExpression = ParenthesizedExpression
			RETURN4,	// [82] FunctionCall = ID LPAREN ArgumentsList RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [83] ArgumentsList = ArgumentsListHelper
			Action.NONE,  	// [84] ArgumentsList = 
			Action.RETURN,	// [85] ArgumentsListHelper = Argument
			RETURN3,	// [86] ArgumentsListHelper = Argument COMMA ArgumentsListHelper; returns 'ArgumentsListHelper' although none is marked
			Action.RETURN,	// [87] Argument = Expression
			RETURN3,	// [88] ArrayExpression = LBRACKET NonEmptyExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [89] NonEmptyExpressionList = Expression
			RETURN3,	// [90] NonEmptyExpressionList = Expression COMMA NonEmptyExpressionList; returns 'NonEmptyExpressionList' although none is marked
			RETURN3	// [91] ParenthesizedExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
